@model IEnumerable<Database.Models.Batch>

@{
    ViewData["Title"] = "Batch Processing Status";
}

<div class="container mx-auto">
    <!-- Processing Status Overview -->
    <div class="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
        <div class="bg-gray-800 p-6 rounded-lg shadow-lg">
            <h3 class="text-lg font-medium text-gray-400">Queue Length</h3>
            <p class="text-3xl font-bold text-white" id="queueLength">@ViewBag.QueueLength</p>
            <p class="text-sm text-gray-500 mt-2">Batches waiting to process</p>
        </div>
        <div class="bg-gray-800 p-6 rounded-lg shadow-lg">
            <h3 class="text-lg font-medium text-gray-400">Active Processors</h3>
            <p class="text-3xl font-bold text-white" id="activeProcessors">@ViewBag.ActiveProcessors</p>
            <p class="text-sm text-gray-500 mt-2">Concurrent batch processors running</p>
        </div>
    </div>

    <!-- Active and Pending Batches -->
    <div class="bg-gray-800 p-6 rounded-lg shadow-lg">
        <h2 class="text-xl font-semibold mb-4 text-white">Active and Pending Batches</h2>

        @if (Model != null && Model.Any())
        {
            <div class="overflow-x-auto">
                <table class="min-w-full bg-gray-800 text-white">
                    <thead>
                        <tr class="bg-gray-700">
                            <th class="py-3 px-4 text-left">Batch ID</th>
                            <th class="py-3 px-4 text-left">Engine</th>
                            <th class="py-3 px-4 text-left">Settings</th>
                            <th class="py-3 px-4 text-left">Progress</th>
                            <th class="py-3 px-4 text-left">Status</th>
                            <th class="py-3 px-4 text-left">Created</th>
                            <th class="py-3 px-4 text-left">Time Elapsed</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var batch in Model)
                        {
                            <tr class="border-b border-gray-700" data-batch-id="@batch.Id">
                                <td class="py-3 px-4">
                                    <span class="font-mono text-sm">@batch.BatchId.Substring(0, 8)...</span>
                                </td>
                                <td class="py-3 px-4">@(batch.Engine?.Name ?? "Unknown")</td>
                                <td class="py-3 px-4">
                                    <div class="text-sm">
                                        <div>Time: @batch.MovetimeMs ms</div>
                                        @{
                                            try
                                            {
                                                var parameters = System.Text.Json.JsonSerializer.Deserialize<dynamic>(batch.Parameters);
                                                if (parameters != null)
                                                {
                                                    <div class="text-xs text-gray-400 mt-1">
                                                        Threads: @parameters.GetProperty("Threads") | Hash: @parameters.GetProperty("Hash")MB
                                                    </div>
                                                }
                                            }
                                            catch
                                            {
                                                <!-- Parameters not parseable -->
                                            }
                                        }
                                    </div>
                                </td>
                                <td class="py-3 px-4">
                                    <div class="flex items-center">
                                        <div class="w-32 bg-gray-700 rounded-full h-3 mr-3">
                                            @{
                                                var gamesCount = batch.Games?.Count() ?? 0;
                                                var percentage = batch.TotalGames > 0 ? (gamesCount * 100.0 / batch.TotalGames) : 0;
                                            }
                                            <div class="bg-blue-500 h-3 rounded-full progress-bar" style="width: @percentage%"></div>
                                        </div>
                                        <span class="progress-text text-sm">@gamesCount / @batch.TotalGames</span>
                                    </div>
                                </td>
                                <td class="py-3 px-4">
                                    @{
                                        var statusClass = batch.Status switch
                                        {
                                            "Pending" => "bg-yellow-800 text-yellow-100",
                                            "InProgress" => "bg-green-800 text-green-100",
                                            "Completed" => "bg-blue-800 text-blue-100",
                                            "Failed" => "bg-red-800 text-red-100",
                                            _ => "bg-gray-700 text-gray-100"
                                        };
                                    }
                                    <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full @statusClass">
                                        @batch.Status
                                    </span>
                                </td>
                                <td class="py-3 px-4 text-sm">@batch.CreatedAt.ToString("MM/dd HH:mm")</td>
                                <td class="py-3 px-4 text-sm time-elapsed" data-created="@batch.CreatedAt.ToString("o")">
                                    @{
                                        var elapsed = DateTime.UtcNow - batch.CreatedAt;
                                        var timeStr = elapsed.TotalHours >= 1
                                        ? $"{(int)elapsed.TotalHours}h {elapsed.Minutes}m"
                                        : $"{elapsed.Minutes}m {elapsed.Seconds}s";
                                    }
                                    @timeStr
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }
        else
        {
            <div class="text-center py-10">
                <p class="text-gray-400">No active or pending batches.</p>
                <a asp-action="Create" class="mt-4 inline-block bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded">
                    Create New Batch
                </a>
            </div>
        }
    </div>
</div>

@section Scripts {
    <script>
        // Update time elapsed every second
        setInterval(() => {
            document.querySelectorAll('.time-elapsed').forEach(el => {
                const created = new Date(el.dataset.created);
                const now = new Date();
                const elapsed = now - created;

                const hours = Math.floor(elapsed / 3600000);
                const minutes = Math.floor((elapsed % 3600000) / 60000);
                const seconds = Math.floor((elapsed % 60000) / 1000);

                if (hours > 0) {
                    el.textContent = `${hours}h ${minutes}m`;
                } else {
                    el.textContent = `${minutes}m ${seconds}s`;
                }
            });
        }, 1000);
    </script>
}